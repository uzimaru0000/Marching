#pragma kernel CreateMap 

RWBuffer<float> map;
int width;
int height;
int depth;
float scale;
float3 offset;

float random(float2 st) {
	return frac(sin(dot(st.xy, float2(12.9898, 78.233))) * 43758.5453);
}

float perlinNoise(float2 st) {
    float2 p = float2(floor(st.x), floor(st.y));
    float2 f = float2(frac(st.x), frac(st.y));
    float2 u = f * f * (3.0 - 2.0 * f);

    float2 p00 = float2(0, 0);
    float2 p10 = float2(1, 0);
    float2 p01 = float2(0, 1);
    float2 p11 = float2(1, 1);

    float v00 = random(p + p00);
    float v10 = random(p + p10);
    float v01 = random(p + p01);
    float v11 = random(p + p11);

    float v0010 = lerp(dot(v00, f - p00), dot(v10, f - p10), u.x);
    float v0111 = lerp(dot(v01, f - p01), dot(v11, f - p11), u.x);

    return lerp(v0010, v0111, u.y) + 0.5;
}

float perlinNoise3(float3 seed) {
	float AB = perlinNoise(seed.xy);
	float BC = perlinNoise(seed.yz);
	float AC = perlinNoise(seed.xz);

	float BA = perlinNoise(seed.yx);
	float CB = perlinNoise(seed.zy);
	float CA = perlinNoise(seed.zx);

	return (AB + BC + AC + BA + CB + CA) / 6.0;
}

[numthreads(4, 4, 4)]
void CreateMap (uint3 id : SV_DispatchThreadID) {
	map[id.x + id.y * width + id.z * width * height] = perlinNoise3((float3) (id + offset) / scale);
}